import logging

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext, MessageHandler, filters
import random
import sqlite3

from config import BOT_TOKEN, WEBHOOK_URL


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def create_db():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    conn = sqlite3.connect('tarolog_users.db')  # –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        username TEXT,
                        balance REAL)''')
    conn.commit()
    conn.close()


def add_user(user_id, username):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('tarolog_users.db')
    cursor = conn.cursor()
    cursor.execute('''INSERT INTO users (user_id, username, balance)
                      VALUES (?, ?, ?) ON CONFLICT(user_id) DO NOTHING''', (user_id, username, 0.0))
    conn.commit()
    conn.close()


def get_balance(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('tarolog_users.db')
    cursor = conn.cursor()
    cursor.execute('''SELECT balance FROM users WHERE user_id = ?''', (user_id,))
    balance = cursor.fetchone()
    conn.close()
    return balance[0] if balance else 0.0


def update_balance(user_id, amount):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('tarolog_users.db')
    cursor = conn.cursor()
    cursor.execute('''UPDATE users SET balance = balance + ? WHERE user_id = ?''', (amount, user_id))
    conn.commit()
    conn.close()


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏—á–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º
async def account(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /account –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info("–í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è /account")
    user_id = update.message.from_user.id
    balance = get_balance(user_id)

    keyboard = [
        [
            InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç", callback_data="replenish"),
            InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_data"),
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±–ª–µ–π\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=reply_markup,
    )


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
create_db()


# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ httpx –Ω–∞ WARNING
logging.getLogger('httpx').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)


# –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –¢–∞—Ä–æ
TARO_CARDS = [
    {"name": "–®—É—Ç", "upright": "–ù–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è", "reversed": "–ë–µ–∑—Ä–∞—Å—Å—É–¥—Å—Ç–≤–æ"},
    {"name": "–ú–∞–≥", "upright": "–°–∏–ª–∞ –≤–æ–ª–∏", "reversed": "–ú–∞–Ω–∏–ø—É–ª—è—Ü–∏—è"},
    {"name": "–ñ—Ä–∏—Ü–∞", "upright": "–ò–Ω—Ç—É–∏—Ü–∏—è", "reversed": "–¢–∞–π–Ω—ã"},
    {"name": "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "upright": "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "reversed": "–†–∞—Å—Ç–æ—á–∏—Ç–µ–ª—å—Å—Ç–≤–æ"},
    {"name": "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "upright": "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "reversed": "–ö–æ–Ω—Ç—Ä–æ–ª—å"},
]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def start(update: Update, context: CallbackContext) -> None:
    logger.info("–í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è /start")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    add_user(user_id, username)

    keyboard = [
        [
            KeyboardButton("üîÆ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥"),
            KeyboardButton("üîë –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"),
        ],
        [
            KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ"),
            KeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
        ]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TarologForYou! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞
async def spread(update: Update, context: CallbackContext):
    logger.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ")
    num_cards = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –≤ —Ä–∞—Å–∫–ª–∞–¥–µ

    if num_cards > len(TARO_CARDS):
        await update.message.reply_text(
            f"–í –∫–æ–ª–æ–¥–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç. –î–æ—Å—Ç—É–ø–Ω–æ: {len(TARO_CARDS)}."
        )
        return

    cards = draw_cards(num_cards)
    response = "–í–∞—à —Ä–∞—Å–∫–ª–∞–¥:\n"
    for card in cards:
        response += f"- {card['name']} ({card['orientation']}): {card['meaning']}\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–∫–ª–∞–¥–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É
    await update.message.reply_text(response)
    logger.info("–†–∞—Å–∫–ª–∞–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")


def draw_cards(num=3):
    """–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ä—Ç –¢–∞—Ä–æ."""
    if num > len(TARO_CARDS):
        raise ValueError(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ {num} –∫–∞—Ä—Ç, –Ω–æ –≤ –∫–æ–ª–æ–¥–µ –≤—Å–µ–≥–æ {len(TARO_CARDS)}.")

    cards = random.sample(TARO_CARDS, num)
    results = []
    for card in cards:
        orientation = random.choice(["upright", "reversed"])
        results.append({
            "name": card["name"],
            "meaning": card[orientation],
            "orientation": "–ü—Ä—è–º–æ–µ" if orientation == "upright" else "–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ"
        })
    return results


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è "üìú –ú–µ–Ω—é" ‚Äî –Ω–µ—Ç –Ω—É–∂–¥—ã –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º –º–µ–Ω—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —É–∂–µ –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
async def handle_menu(update: Update, context: CallbackContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ –∏ —á—Ç–æ –æ–Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–æ–π
    if update.message.text == "üìú –ú–µ–Ω—é":
        logger.info("–ú–µ–Ω—é –Ω–∞–∂–∞—Ç–æ, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await start(update, context)

    elif update.message.text == "üîÆ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥":
        logger.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å–∫–ª–∞–¥")
        await spread(update, context)

    elif update.message.text == "üîë –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
        logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
        await account(update, context)

    elif update.message.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        logger.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
        await update.message.reply_text(
            "–≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¢–∞—Ä–æ. –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é."
        )

    elif update.message.text == "‚ùì –ü–æ–º–æ—â—å":
        logger.info("–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏")
        await update.message.reply_text(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üîÆ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ\n"
            "‚ÑπÔ∏è –û –±–æ—Ç–µ ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
            "‚ùì –ü–æ–º–æ—â—å ‚Äî –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
        )


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
async def set_webhook(app):
    await app.bot.set_webhook(url=WEBHOOK_URL)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("spread", spread))
    app.add_handler(CommandHandler("account", account))
    app.add_handler(MessageHandler(filters.TEXT, handle_menu))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    app.run_webhook(
        listen="0.0.0.0",
        port=8443,
        url_path=BOT_TOKEN,
        webhook_url=WEBHOOK_URL,
    )


if __name__ == "__main__":
    main()
